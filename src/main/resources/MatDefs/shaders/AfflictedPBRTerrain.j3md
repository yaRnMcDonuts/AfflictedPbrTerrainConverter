// NOTE: Doesn't support OpenGL1
MaterialDef Afflicted PBR Terrain {

    MaterialParameters {

    
    

        Float NormalType : -1.0


        Boolean UseVertexColorsAsSunIntensity
        Float StaticSunIntensity

        Vector4 ProbeColor

        Boolean BrightenIndoorShadows


        // Use alpha channel of normal texture for parallax mapping;
        Boolean parallaxMapping

        Float ParallaxHeight : 0.005

        // The emissive color of the object
        Color Emissive        
        // the emissive power
        Float EmissivePower : 3.5      
        // the emissive intensity
        Float EmissiveIntensity : 2.3

        // Specular/gloss map
        Texture2D MetallicMap -LINEAR
        
  

        // Set to Use Lightmap
    Texture2D LightMap

        Int PlaguedMapScale : 8

        Float AfflictionRoughnessValue : 1.0
        Float AfflictionMetallicValue : 0.0
        Float AfflictionEmissiveValue : 0.0 //note that this is simplified into one value, rather than 2 with power and intensity like the regular pbr values.

        Texture2D AfflictionTexture
        Texture2D PlaguedAlbedoMap  -LINEAR
        Texture2D PlaguedNormalMap  -LINEAR
        Texture2D PlaguedRoughnessMetallicMap -LINEAR
        Texture2D PlaguedEmissiveMap -LINEAR

        Color AfflictionEmissiveColor : 1.0 1.0 1.0 1.0


        Float TileWidth : 0
        Vector3 TileLocation

        Int AfflictionMode_0 : 1
        Int AfflictionMode_1 : 1
        Int AfflictionMode_2 : 1
        Int AfflictionMode_3 : 1
        Int AfflictionMode_4 : 1
        Int AfflictionMode_5 : 1
        Int AfflictionMode_6 : 1
        Int AfflictionMode_7 : 1
        Int AfflictionMode_8 : 1
        Int AfflictionMode_9 : 1
        Int AfflictionMode_10 : 1
        Int AfflictionMode_11 : 1

        Float Roughness_0 : 0.0
        Float Roughness_1 : 0.0
        Float Roughness_2 : 0.0
        Float Roughness_3 : 0.0
        Float Roughness_4 : 0.0
        Float Roughness_5 : 0.0
        Float Roughness_6 : 0.0
        Float Roughness_7 : 0.0
        Float Roughness_8 : 0.0
        Float Roughness_9 : 0.0
        Float Roughness_10 : 0.0
        Float Roughness_11 : 0.0

        Float Metallic_0 : 0.0
        Float Metallic_1 : 0.0
        Float Metallic_2 : 0.0
        Float Metallic_3 : 0.0
        Float Metallic_4 : 0.0
        Float Metallic_5 : 0.0
        Float Metallic_6 : 0.0
        Float Metallic_7 : 0.0
        Float Metallic_8 : 0.0
        Float Metallic_9 : 0.0
        Float Metallic_10 : 0.0
        Float Metallic_11 : 0.0


        Int DebugValuesMode

        // use tri-planar mapping
        Boolean useTriPlanarMapping

        // Use ward specular instead of phong
        Boolean WardIso


        // Albedo color
        Color Albedo



        // Texture map #0
        Texture2D AlbedoMap_0
        Float AlbedoMap_0_scale
        Texture2D NormalMap_0 -LINEAR

        // Texture map #1
        Texture2D AlbedoMap_1
        Float AlbedoMap_1_scale
        Texture2D NormalMap_1 -LINEAR

        // Texture map #2
        Texture2D AlbedoMap_2
        Float AlbedoMap_2_scale
        Texture2D NormalMap_2 -LINEAR

        // Texture map #3
        Texture2D AlbedoMap_3
        Float AlbedoMap_3_scale
        Texture2D NormalMap_3 -LINEAR

        // Texture map #4
        Texture2D AlbedoMap_4
        Float AlbedoMap_4_scale
        Texture2D NormalMap_4 -LINEAR

        // Texture map #5
        Texture2D AlbedoMap_5
        Float AlbedoMap_5_scale
        Texture2D NormalMap_5 -LINEAR

        // Texture map #6
        Texture2D AlbedoMap_6
        Float AlbedoMap_6_scale
        Texture2D NormalMap_6 -LINEAR

        // Texture map #7
        Texture2D AlbedoMap_7
        Float AlbedoMap_7_scale
        Texture2D NormalMap_7 -LINEAR

        // Texture map #8
        Texture2D AlbedoMap_8
        Float AlbedoMap_8_scale
        Texture2D NormalMap_8 -LINEAR

        // Texture map #9
        Texture2D AlbedoMap_9
        Float AlbedoMap_9_scale
        Texture2D NormalMap_9 -LINEAR

        // Texture map #10
        Texture2D AlbedoMap_10
        Float AlbedoMap_10_scale
        Texture2D NormalMap_10 -LINEAR

        // Texture map #11
        Texture2D AlbedoMap_11
        Float AlbedoMap_11_scale
        Texture2D NormalMap_11 -LINEAR



        // Texture that specifies alpha values
        Texture2D AlphaMap -LINEAR
        Texture2D AlphaMap_1 -LINEAR
        Texture2D AlphaMap_2 -LINEAR

        // For Spec gloss pipeline
        Boolean UseSpecGloss
        Texture2D SpecularMap
        Texture2D GlossinessMap
        Texture2D SpecularGlossinessMap
        Color Specular : 1.0 1.0 1.0 1.0
        Float Glossiness : 1.0

        Vector4 ProbeData

        // Prefiltered Env Map for indirect specular lighting
        TextureCubeMap PrefEnvMap -LINEAR
        
        // Irradiance map for indirect diffuse lighting
        TextureCubeMap IrradianceMap -LINEAR

        //integrate BRDF map for indirect Lighting
        Texture2D IntegrateBRDF -LINEAR

        // Parallax/height map
        Texture2D ParallaxMap -LINEAR

        //Set to true is parallax map is stored in the alpha channel of the normal map
        Boolean PackedNormalParallax   

        //Sets the relief height for parallax mapping
        Float ParallaxHeight : 0.05       

        //Set to true to activate Steep Parallax mapping
        Boolean SteepParallax

        // Set to Use Lightmap
        Texture2D LightMap

        // Set to use TexCoord2 for the lightmap sampling
        Boolean SeparateTexCoord
        // the light map is a gray scale ao map, on ly the r channel will be read.
        Boolean LightMapAsAOMap

        //shadows
        Int FilterMode
        Boolean HardwareShadows

        Texture2D ShadowMap0
        Texture2D ShadowMap1
        Texture2D ShadowMap2
        Texture2D ShadowMap3
        //pointLights
        Texture2D ShadowMap4
        Texture2D ShadowMap5
        
        Float ShadowIntensity
        Vector4 Splits
        Vector2 FadeInfo

        Matrix4 LightViewProjectionMatrix0
        Matrix4 LightViewProjectionMatrix1
        Matrix4 LightViewProjectionMatrix2
        Matrix4 LightViewProjectionMatrix3
        //pointLight
        Matrix4 LightViewProjectionMatrix4
        Matrix4 LightViewProjectionMatrix5   
        Vector3 LightPos
        Vector3 LightDir

        Float PCFEdge
        Float ShadowMapSize

        // For hardware skinning
        Int NumberOfBones
        Matrix4Array BoneMatrices
                
        //For instancing
        Boolean UseInstancing

        //For Vertex Color
        Boolean UseVertexColor

        Boolean BackfaceShadows : false


        Boolean UseFog
        Color FogColor
        Vector2 LinearFog
        Float ExpFog
        Float ExpSqFog

        // Alpha threshold for fragment discarding
        Float AlphaDiscardThreshold (AlphaTestFallOff)
    }

    Technique {

        LightMode SinglePassAndImageBased

        VertexShader GLSL100 GLSL130 GLSL150:   MatDefs/vert/AfflictedPBRTerrain.vert
        FragmentShader GLSL100 GLSL130 GLSL150: MatDefs/frag/AfflictedPBRTerrain.frag

        WorldParameters {
            WorldViewProjectionMatrix
            CameraPosition
            WorldMatrix
            WorldNormalMatrix
            ViewProjectionMatrix
            ViewMatrix
            Time

        }

        Defines {
                
            TILELOCATION : TileLocation
            AFFLICTIONTEXTURE : AfflictionTexture

            AFFLICTIONALBEDOMAP: PlaguedAlbedoMap 
            AFFLICTIONNORMALMAP : PlaguedNormalMap 
            AFFLICTIONROUGHNESSMETALLICMAP : PlaguedRoughnessMetallicMap
            AFFLICTIONEMISSIVEMAP : PlaguedEmissiveMap


            USE_VERTEX_COLORS_AS_SUN_INTENSITY : UseVertexColorsAsSunIntensity
            STATIC_SUN_INTENSITY : StaticSunIntensity
            BRIGHTEN_INDOOR_SHADOWS : BrightenIndoorShadows

            DISCARD_ALPHA : AlphaDiscardThreshold

            USE_FOG : UseFog
            FOG_LINEAR : LinearFog
            FOG_EXP : ExpFog
            FOG_EXPSQ : ExpSqFog

            NORMAL_TYPE: NormalType

            TRI_PLANAR_MAPPING : useTriPlanarMapping

            ALBEDOMAP_0 : AlbedoMap_0
            ALBEDOMAP_1 : AlbedoMap_1
            ALBEDOMAP_2 : AlbedoMap_2
            ALBEDOMAP_3 : AlbedoMap_3
            ALBEDOMAP_4 : AlbedoMap_4
            ALBEDOMAP_5 : AlbedoMap_5
            ALBEDOMAP_6 : AlbedoMap_6
            ALBEDOMAP_7 : AlbedoMap_7
            ALBEDOMAP_8 : AlbedoMap_8
            ALBEDOMAP_9 : AlbedoMap_9
            ALBEDOMAP_10 : AlbedoMap_10
            ALBEDOMAP_11 : AlbedoMap_11

            NORMALMAP_0 : NormalMap_0
            NORMALMAP_1 : NormalMap_1
            NORMALMAP_2 : NormalMap_2
            NORMALMAP_3 : NormalMap_3
            NORMALMAP_4 : NormalMap_4
            NORMALMAP_5 : NormalMap_5
            NORMALMAP_6 : NormalMap_6
            NORMALMAP_7 : NormalMap_7
            NORMALMAP_8 : NormalMap_8
            NORMALMAP_9 : NormalMap_9
            NORMALMAP_10 : NormalMap_10
            NORMALMAP_11 : NormalMap_11

            ALPHAMAP : AlphaMap
            ALPHAMAP_1 : AlphaMap_1
            ALPHAMAP_2 : AlphaMap_2
            ALBEDOMAP_0_SCALE : AlbedoMap_0_scale
            ALBEDOMAP_1_SCALE : AlbedoMap_1_scale
            ALBEDOMAP_2_SCALE : AlbedoMap_2_scale
            ALBEDOMAP_3_SCALE : AlbedoMap_3_scale
            ALBEDOMAP_4_SCALE : AlbedoMap_4_scale
            ALBEDOMAP_5_SCALE : AlbedoMap_5_scale
            ALBEDOMAP_6_SCALE : AlbedoMap_6_scale
            ALBEDOMAP_7_SCALE : AlbedoMap_7_scale
            ALBEDOMAP_8_SCALE : AlbedoMap_8_scale
            ALBEDOMAP_9_SCALE : AlbedoMap_9_scale
            ALBEDOMAP_10_SCALE : AlbedoMap_10_scale
            ALBEDOMAP_11_SCALE : AlbedoMap_11_scale

            DEBUG_VALUES_MODE : DebugValuesMode
            
        }
    }


    Technique PreShadow {

        VertexShader GLSL100 GLSL150 :   Common/MatDefs/Shadow/PreShadow.vert
        FragmentShader GLSL100 GLSL150 : Common/MatDefs/Shadow/PreShadow.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            DISCARD_ALPHA : AlphaDiscardThreshold
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing
        }

        ForcedRenderState {
            FaceCull Off
            DepthTest On
            DepthWrite On
            PolyOffset 5 3
            ColorWrite Off
        }

    }


    Technique PostShadow{
        VertexShader GLSL100 GLSL150:   Common/MatDefs/Shadow/PostShadow.vert
        FragmentShader GLSL100 GLSL150: Common/MatDefs/Shadow/PostShadow.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
            ViewProjectionMatrix
            ViewMatrix
        }

        Defines {
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            DISCARD_ALPHA : AlphaDiscardThreshold           
            SHADOWMAP_SIZE : ShadowMapSize
            FADE : FadeInfo
            PSSM : Splits
            POINTLIGHT : LightViewProjectionMatrix5
            NUM_BONES : NumberOfBones
            INSTANCING : UseInstancing
            BACKFACE_SHADOWS: BackfaceShadows
        }

        ForcedRenderState {
            Blend Modulate
            DepthWrite Off   
            PolyOffset -0.1 0  
        }
    }
    
}